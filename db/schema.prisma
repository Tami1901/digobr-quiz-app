// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

// --------------------------------------

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String   @unique

  createdGroups Group[]
  joinedGroups  GroupUser[]

  role           String    @default("USER")
  hashedPassword String
  tokens         Token[]
  sessions       Session[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  difficulty Difficulty
  question   String
  category   String
  ans1       String
  ans2       String
  ans3       String
  ans4       String

  solutions QuestionSolution[]
}

model Group {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById Int
  groupUsers  GroupUser[]
}

model GroupUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  quizSolved Boolean            @default(false)
  solutions  QuestionSolution[]

  @@unique([userId, groupId])
}

model QuestionSolution {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answerIndex Int?
  isInitial   Boolean
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  Int
  groupUser   GroupUser @relation(fields: [groupUserId], references: [id])
  groupUserId String

  @@unique([questionId, groupUserId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

enum TokenType {
  RESET_PASSWORD
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}
